// The captcha requires you to review a sequence of digits (your puzzle input)
// and find the sum of all digits that match the next digit in the list.
// The list is circular, so the digit after the last digit is the first digit in the list.

fn find_sum(input: &str) -> u32 {
    let input_length = input.len();

    let chars: Vec<_> = input.chars().map( |n| n.to_digit(10).unwrap() ).collect();
    let mut peekable_cycling_chars = chars.iter().cycle().peekable();

    (0..input_length).fold(0, |acc, _| {
        let value = peekable_cycling_chars.next().unwrap();
        let next_value = peekable_cycling_chars.peek().unwrap();

        if value == *next_value {
            acc + value
        } else {
            acc
        }
    })
}

#[test]
fn find_sum_example_1() {
    assert_eq!(3, find_sum("1122"));
}

#[test]
fn find_sum_example_2() {
    assert_eq!(4, find_sum("1111"));
}

#[test]
fn find_sum_example_3() {
    assert_eq!(0, find_sum("1234"));
}

#[test]
fn find_sum_example_4() {
    assert_eq!(9, find_sum("91212129"));
}

#[test]
fn find_sum_solution() {
    let input = "659282248893133858981552542523681828522955561639292843326243684738654451464864528812983483486236384\
      75422629531648776942345143751649276166492641224871823214374596468519666497324749253532816998953268248525557471\
      27547527163197544539468632369858413232684269835288817735678173986264554586412678364433327621627496939956645283\
      71245326525526156551158637355143919827637384377124956372291484725552445267584255862284541621819537445938678561\
      82551298315399845596441853695436628213116861621376721682661524946564488247197913987973593264122357232345855395\
      15385352426579831251943911197862994974133738196775618715739412713224837531544346114877971977411275354168752719\
      85888934758813678789479847612333589451434241174211113533728644996887925148144975729416736386711992781151352971\
      12395349141192928331116244834724667814759514943485161254741425329238589412795696754456946543553149253868331757\
      95464912974865287564866767924677333599828829875283753669783176288899797691713766199641716546284841387455733132\
      51964936511318243223847767337523479339459543581692445358551397311954884157712614196277664929432218969537545174\
      37475812419226579471822324546118375125647762739298151693678998186988922346188478151555787368752956299172479776\
      58723868641411493551796998791839776335793682643551875947346347344695869874564432566956882395424267187552799458\
      35212124814737193894379999515861787139328953478921485274797658743285767515688483763468725736397543753562119788\
      78773262952291956632351292133981782825494325994559657599991592472958573664853457595166224278335188374582361237\
      23353817444545271644684925297477149298484753858863551357266259935298184325926848958828192317538375317946457985\
      87496543448682938764742522295258529362647335121116168429735193277146266562176439283312223657735366921583372177\
      24828637756292446196392346368532679348957838918238778451983266657286593287294724561752852296812449743892482354\
      57688922179237895954959228638193933854787917647154837695422429184757725387589969781672596568421191236374563718\
      951738499591454571728641951699981615249635314789251239677393251756396";
    assert_eq!(1029, find_sum(input));
}
